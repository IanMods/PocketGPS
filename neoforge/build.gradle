plugins {
    id 'com.github.johnrengelman.shadow'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    //Xaero's Minimap
    modLocalRuntime "curse.maven:xaeros-minimap-263420:${project.xaeros_minimap_neoforge_version}"

    //JourneyMap
    modCompileOnly "curse.maven:journeymap-32274:${project.journeymap_neoforge_version}"

    //FTB Chunks + Dependencies
    modCompileOnly "curse.maven:ftb-chunks-forge-314906:${project.ftb_chunks_neoforge_version}"
    modCompileOnly "curse.maven:ftb-library-forge-404465:${project.ftb_library_neoforge_version}"
    modCompileOnly "curse.maven:ftb-teams-forge-404468:${project.ftb_teams_neoforge_version}"
    modCompileOnly "curse.maven:architectury-api-419699:${project.architectury_api_neoforge_version}"

    //Curios + Accessories
    modCompileOnly "curse.maven:accessories-938917:${project.accessories_neoforge_version}"
    modCompileOnly "curse.maven:accessories-cc-layer-1005683:${project.cclayer_neoforge_version}"
    modCompileOnly("me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}") { transitive = false }
}


shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

modrinth {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_project_id
    versionNumber = minecraft_version + "-" + version
    versionName = base.archivesName.get() + "-" + mod_version
    versionType = "release"
    uploadFile = jar

    List<String> mcVersions = minecraft_game_versions.split(",")
    gameVersions = mcVersions
    loaders = ["neoforge"]

    changelog = recentChangelogText

    dependencies {
        optional.project "xaeros-minimap"
        optional.project "xaeros-minimap-fair"
        optional.project "journeymap"
        optional.project "curios"
        optional.project "accessories"
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_project_id, remapJar)
    mainFile.changelogType = "markdown"
    mainFile.changelog = recentChangelogText
    mainFile.releaseType = "release"

    List<String> mcVersions = minecraft_game_versions.split(",")
    mainFile.gameVersions = mcVersions
    mainFile.addModLoader("NeoForge")
    mainFile.addJavaVersion("Java 21")

    mainFile.addOptional("xaeros-minimap")
    mainFile.addOptional("xaeros-minimap-fair-play-edition")
    mainFile.addOptional("journeymap")
    mainFile.addOptional("ftb-chunks-forge")
    mainFile.addOptional("curios")
    mainFile.addOptional("accessories")
}

task publishNeoForge {
    group = "publishing"
    afterEvaluate {
        dependsOn(tasks.publishCurseForge)
        dependsOn(tasks.modrinth)
    }
}