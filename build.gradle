plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'

    loom {
        silentMojangMappingsLicense()
    }

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "${project.mod_id}-${project.name}-${project.minecraft_version}"
    }

    repositories {
        mavenCentral()
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven { url = "https://maven.blamejared.com/" } // JEI
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
        maven { url = 'https://maven.ladysnake.org/releases'} // Cardinal Components
        exclusiveContent {
            forRepository {
                maven { url = "https://cursemaven.com"}
            }
            filter {
                includeGroup "curse.maven"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        // layered mappings - Mojmap names, parchment and QM docs and parameters
        mappings(loom.layered {
            it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        })

        // see each subproject for dependencies.
    }


    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        //withSourcesJar()
        toolchain.languageVersion = JavaLanguageVersion.of(project.java_version)
        sourceCompatibility = JavaLanguageVersion.of(project.java_version)
        targetCompatibility = JavaLanguageVersion.of(project.java_version)
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")

    archivesBaseName = base.archivesName.get()
    group = project.group
    version = project.mod_version

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    machete {
        // disable machete locally for faster builds
        enabled = buildNumber != null
    }

    processResources {
        def expandProps = [
                "version"                   : mod_version,
                "group"                     : project.group, //Else we target the task's group.
                "minecraft_version"         : minecraft_version,
                "forge_version"             : forge_version,
                "forge_loader_version_range": forge_loader_version_range,
                "forge_version_range"       : forge_version_range,
                "minecraft_version_range"   : minecraft_version_range,
                "fabric_api_version"        : fabric_api_version,
                "fabric_loader_version"     : fabric_loader_version,
                "mod_name"                  : mod_name,
                "mod_author"                : mod_author,
                "mod_id"                    : mod_id,
                "license"                   : license,
                "description"               : description,
                "credits"                   : credits,
                "java_version"              : java_version
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
            expand project.properties
        }
        inputs.properties(expandProps)
    }
}