plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'net.darkhax.curseforgegradle' version '1.1.18'
    id 'com.modrinth.minotaur' version '2.+'
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = project.group
    version = project.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "${project.mod_id}-${project.name}-${project.minecraft_version}"
    }

    repositories {
        mavenCentral()
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
        maven { url = "https://maven.blamejared.com/" } // JEI
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
        maven { url = 'https://maven.ladysnake.org/releases' } // Cardinal Components
        maven { url = 'https://maven.neoforged.net/releases' } //NeoForge
        exclusiveContent {
            forRepository {
                maven { url = "https://cursemaven.com" }
            }
            filter {
                includeGroup "curse.maven"
            }
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings loom.officialMojangMappings()
//        mappings(loom.layered {
//            officialMojangMappings()
//            parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
//        })
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    processResources {
        def expandProps = [
                "version"                      : mod_version,
                "group"                        : project.group, //Else we target the task's group.
                "minecraft_version"            : minecraft_version,
                "forge_version"                : forge_version,
                "forge_loader_version_range"   : forge_loader_version_range,
                "forge_version_range"          : forge_version_range,
                "minecraft_version_range"      : minecraft_version_range,
                "fabric_api_version"           : fabric_api_version,
                "fabric_loader_version"        : fabric_loader_version,
                "neoforge_version"             : neoforge_version,
                "neoforge_loader_version_range": neoforge_loader_version_range,
                "neoforge_version_range"       : neoforge_version_range,
                "mod_name"                     : mod_name,
                "mod_author"                   : mod_author,
                "mod_id"                       : mod_id,
                "license"                      : license,
                "description"                  : description,
                "credits"                      : credits,
                "java_version"                 : java_version
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
            expand project.properties
        }
        inputs.properties(expandProps)
    }
}

task publishAll {
    group = "upload"
    dependsOn("fabric:publishFabric")
//    dependsOn("forge:publishForge")
    dependsOn("neoforge:publishNeoForge")
}