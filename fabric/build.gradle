plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    //Xaero's Minimap
    modCompileOnly "curse.maven:xaeros-minimap-263420:${project.xaeros_minimap_fabric_version}"

    //JourneyMap
    modCompileOnly "curse.maven:journeymap-32274:${project.journeymap_fabric_version}"

    //FTB Chunks + Dependencies
    modCompileOnly "curse.maven:ftb-chunks-fabric-472657:${project.ftb_chunks_fabric_version}"
    modCompileOnly "curse.maven:ftb-library-fabric-438495:${project.ftb_library_fabric_version}"
    modCompileOnly "curse.maven:ftb-teams-fabric-438497:${project.ftb_teams_fabric_version}"
    modCompileOnly "curse.maven:architectury-api-419699:${project.architectury_api_fabric_version}"

    //Trinkets + Accessories
    modCompileOnly "curse.maven:accessories-938917:${project.accessories_fabric_version}"
    modCompileOnly "curse.maven:accessories-tc-layer-1005680:${project.tclayer_fabric_version}"
    modCompileOnly "me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"
    modCompileOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.1"
    modCompileOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-item:5.2.1"
    modCompileOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.1"

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}